BOOKS_DATABASE = [
    {
        "id": 1,
        "name": "test_name_1",
        "pages": 200,
    },
    {
        "id": 2,
        "name": "test_name_2",
        "pages": 400,
    }
]



class Book:
        def __init__(self, id_: int, name: str, pages: int): # конструктор с параметрами ID книги, название и коли-во страниц
            self.name = None  # объявляем поля
            self.id_ = None
            self.pages = None
            self.set_id(id_)
            self.set_name(name)
            self.set_pages(pages)

        def set_id(self, id_):  # метод присвоения ID с проверкой на "int" и неотрицательность:
            if not isinstance(id_, int) :
                raise TypeError("Id - целое число")  # сточка генерирует ошибку типа и выводит в консоль соответствующее сообщение,
                # предполагается, что значение ID имеет тип 'int'
            if id_ < 0:
                raise ValueError("Id не может быть меньше нуля")  # сточка генерирует ошибку значения и выводит в консоль соответствующее сообщение,
                # предполагается, что значение ID или равно нулю, или положительное число

            self.id_ = id_ # атрибуту ID присваивается переданное значение ID

        def set_pages(self, pages):  # метод присвоения количества страниц с проверкой на "int" и положительность:
            if not isinstance(pages, int) :
                raise TypeError("Количество страниц - целое число") # сточка генерирует ошибку типа и выводит в консоль соответствующее сообщение,
                # предполагается, что количество страниц имеет тип 'int'
            if pages <= 0:
                raise ValueError("Количество страниц должно быть положительным числом") # сточка генерирует ошибку значения и выводит в консоль соответствующее сообщение,
                # предполагается, что количество страниц является положительным числом
            self.pages = pages # атрибуту pages присваивается переданное количество страниц


        def set_name(self, name):  # метод присвоения названия книги с проверкой, что название действительно является строкой
            if not isinstance(name, str) :
                raise TypeError("Имя должно быть строкой")  # сточка генерирует ошибку типа и выводит в консоль соответствующее сообщение,
                # предполагается, что название книги является строкой
            self.name = name # атрибуту name присваивается переданное название книги

        def __str__(self) -> str:  # "магический" метод, который нужен для того, чтобы брать название книги
            return f'Книга "{self.name}"'

        def __repr__(self) -> str: # "магический" метод для возвращения валидной строки, по которой можно инициализировать экземпляр
            return f'Book(id_={self.id_}, name=\'{self.name}\', pages={self.pages})'



if __name__ == '__main__':
    # инициализируем список книг
    list_books = [
        Book(id_=book_dict['id'], name=book_dict['name'], pages=book_dict['pages']) for book_dict in BOOKS_DATABASE
    ]
    for book in list_books:
        print(book)  # проверяем метод __str__

    print(list_books)  # проверяем метод __repr__
